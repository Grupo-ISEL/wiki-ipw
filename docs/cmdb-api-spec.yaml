openapi: 3.0.3
info:
  title: CMDB API
  description: Chelas Movies Database API
  contact:
    name: Andr√© Monteiro
    email: a37316@alunos.isel.pt
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:1337
  description: Local server


tags:
- name: Movies
  description: Movies operations
- name: Groups
  description: Groups operations
- name: Users
  description: Users operations


paths:
  /movies:
    get:
      tags:
      - Movies
      summary: Get movies
      description: Get movies
      operationId: getMovies
      parameters:
      - name: title
        in: query
        description: Movie title to search
        required: false
        schema:
          type: string
      - name: limit
        in: query
        description: Number of returned movie (max 250)
        required: false
        schema:
          minimum: 0
          maximum: 250
          type: integer
      - name: offset
        in: query
        description: Offset to return movies
        required: false
        schema:
          minimum: 0
          maximum: 250
          type: integer
      responses:
        '200':
          description: Search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /movies/top:
    get:
      tags:
      - Movies
      summary: Get top movies
      description: Get top movies
      operationId: getTopMovies
      parameters:
      - name: limit
        in: query
        description: Number of returned movies (max 250)
        required: false
        schema:
          minimum: 0
          maximum: 250
          type: integer
      - name: offset
        in: query
        description: Offset to return movies
        required: false
        schema:
          minimum: 0
          type: integer
      responses:
        '200':
          description: Get top movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
  /groups:
    get:
      tags:
      - Groups
      summary: List all groups
      description: List all groups
      operationId: getAllGroups
      security:
      - bearerAuth: [ ]
      responses:
        '200':
          description: All groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
    post:
      tags:
      - Groups
      summary:  Create group
      description: Create group
      operationId: createGroup
      security:
      - bearerAuth: [ ]
      requestBody:
        description: Group to create
        required: true
        content:
          application/json:
           schema:
             $ref: '#/components/schemas/NewGroup'
      responses:
        '200':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewGroupCreated'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'

  /groups/{id}:
    get:
      tags:
      - Groups
      summary: Get group by ID
      description: Get group by ID
      operationId: getGroup
      security:
      - bearerAuth: [ ]
      parameters:
      - name: id
        in: path
        description: Group ID
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Group not found
          content: { }
    put:
      tags:
      - Groups
      summary: Edit group
      description: Edit group
      operationId: editGroup
      security:
      - bearerAuth: [ ]
      parameters:
      - name: id
        in: path
        description: Group ID
        required: true
        schema:
          type: integer
      requestBody:
        description: Group details to edit
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
      responses:
        '200':
          description: Group edited
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewGroupCreated'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Group not found
          content: { }
    delete:
      tags:
        - Groups
      summary: Delete group by ID
      description: Delete group by ID
      operationId: deleteGroup
      security:
      - bearerAuth: [ ]
      parameters:
      - name: id
        in: path
        description: Group ID
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Group not found
          content: { }
  /groups/{id}/movies/{movieId}:
    put:
      tags:
      - Groups
      summary: Add movie to group
      description: Add movie to group
      operationId: addMovieToGroup
      security:
      - bearerAuth: [ ]
      parameters:
      - name: id
        in: path
        description: Group ID
        required: true
        schema:
          type: string
      - name: movieId
        in: path
        description: Movie ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Group or Movie not found
          content: { }
    delete:
      tags:
      - Groups
      summary: Remove movie from group
      description: Remove movie from group
      operationId: delMovieFromGroup
      security:
      - bearerAuth: [ ]
      parameters:
      - name: id
        in: path
        description: Group ID
        required: true
        schema:
          type: integer
      - name: movieId
        in: path
        description: Movie ID
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
        '401':
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Group or Movie not found
          content: { }
  /users:
    get:
      tags:
        - Users
      summary: Get users
      description: Get all users
      operationId: getUsers
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
    post:
      tags:
        - Users
      summary: Create new user
      description: Adds a user to the system
      operationId: addUser
      requestBody:
        description: User name
        required: true
        content:
          application/json:
            schema:
              required:
              - username
              type: object
              properties:
                username:
                  type: string
                  description: username
                  example: andre
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewUser'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRequest'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Movie:
      required:
      - id
      - title
      - runtime
      type: object
      properties:
        id:
          type: string
          description: Movie ID
          example: "tt0111161"
        title:
          type: string
          description: Movie title
          example: The Shawshank Redemption
        runtime:
          type: integer
          minimum: 0
          description: Movie runtime
          example: 142
    Group:
      required:
      - id
      - name
      - description
      - movies
      - total-duration
      type: object
      properties:
        id:
          type: string
          description: Group ID
          example: 1
        name:
         type: string
         description: Group name
         example: My group
        description:
          type: string
          description: Group description
          example: My favorite movies
        movies:
          type: array
          description: Favorite movies list
          items:
            $ref: '#/components/schemas/Movie'
        total-duration:
          type: integer
          minimum: 0
          description: Total duration of favorite movies
          example: 142
    NewGroup:
      required:
      - id
      - name
      - description
      type: object
      properties:
        id:
          type: integer
          description: Group ID
          minimum: 0
          example: 1
        name:
          type: string
          description: Group name
          example: My group
        description:
          type: string
          description: Group description
          example: My favorite movies
    NewGroupCreated:
      required:
      - status
      - group
      - user
      type: object
      properties:
        status:
          type: string
          description: Status
          example: New group created
        group:
          $ref: '#/components/schemas/Group'
        user:
          $ref: '#/components/schemas/User'
    NewUser:
      required:
      - status
      - userId
      - token
      type: object
      properties:
        status:
          type: string
          description: status
          example: New user created
        userId:
          type: integer
          description: User ID
          example: 123456789
        token:
          type: string
          description: User token
          format: uuid
          example: a3d50b64-e401-4c57-a698-809fa2b85af2
    User:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 123456789
        name:
          type: string
          description: User name
          example: andre
    InvalidRequest:
      type: object
      properties:
        error:
          type: string
          example: Invalid request
    Forbidden:
      type: object
      properties:
        error:
          type: string
          example: Forbidden
    NotAuthorized:
      type: object
      properties:
        error:
          type: string
          example: Not Authorized
